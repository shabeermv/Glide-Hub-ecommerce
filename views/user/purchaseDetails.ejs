<%- include("../../views/partials/users/header.ejs") %>

<style>
    .order-card {
        background: #fff;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .badge-status {
        background-color: #d4f5e9;
        color: #28a745;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
</style>

<body>
    <div class="container mt-9">
        <h2 class="mb-3">Order Details</h2>
        <div class="order-card">
            <h5>Order ID: #<%= order.id %></h5>
            <p><small><%= order.createdAt %></small></p>
            <span class="badge-status"><%= order.orderStatus %></span>
        
            <h2>Products Ordered</h2>
            <ul class="list-unstyled">
                <% 
                let cancelableProductsCount = order.products.filter(product => 
                    !["Cancel Requested", "Cancelled"].includes(product.status)
                ).length;

                //  Define `allProductsReturned` and `hasReturnableProducts`
                const allProductsReturned = order.products.every(product => product.status === "Returned");
                const hasReturnableProducts = order.products.some(product => product.status === "Delivered");
                %>
                
                <% order.products.forEach(product => { %>
                    <li class="d-flex justify-content-between align-items-center border-bottom py-3">
                        <div>
                            <p><strong>Product:</strong> <%= product.productId.title || 'No title available' %></p>
                            <p><strong>Price:</strong> â‚¹<%= product.productId.price.toFixed(2) %></p>
                            <p><strong>Quantity:</strong> <%= product.quantity %></p>
                            <p><strong>Size:</strong> <%= product.size %></p>
                            
                            <% if (product.status === "Cancel Requested") { %>
                                <span class="text-warning fw-bold">Cancellation Requested</span>
                            <% } else if (product.status === "Cancelled") { %>
                                <span class="text-danger fw-bold">Cancelled</span>
                            <% } else if (product.status === "Returned") { %>
                                <span class="text-success fw-bold">Returned</span>
                            <% } else if (product.status === "Return Rejected") { %>
                                <span class="text-warning fw-bold">Return Rejected</span>
                            <% } else if (["Pending", "Confirmed", "Shipped"].includes(product.status)) { %>
                                <% if (cancelableProductsCount > 1) { %>
                                    <button class="btn btn-warning mt-2" onclick="cancelProduct('<%= order._id %>', '<%= product.productId._id %>')">
                                        Cancel Product
                                    </button>
                                    
                                    
                                <% } %>
                            <% } else if (product.status === "Delivered") { %>
                                <% if (product.status !== "Returned" && product.status !== "Return Requested") { %>
                                    <button class="btn btn-danger mt-2" onclick="openReturnModal('<%= order._id %>', '<%= product.productId._id %>', '<%= product._id %>')">
                                        Return Product
                                    </button>
                                <% } else if (product.status === "Return Requested") { %>
                                    <span class="text-warning fw-bold">Return Requested</span>
                                <% } %>
                            <% } %>
                        </div>

                        <div>
                            <img src="<%= product.productId.image.length > 0 ? product.productId.image[0] : '/images/placeholder.jpg' %>" 
                                 alt="<%= product.productId.title %>" width="200" class="img-fluid rounded">
                        </div>
                    </li>
                <% }) %>
            </ul>
            
            <div class="row mt-4">
                <div class="col-md-6">
                    <h5>Customer</h5>
                    <p><strong>Name:</strong> <%= order.userId.username %></p>
                    <p><strong>Email:</strong> <%= order.userId.email %></p>
                    <p><strong>Phone:</strong> <%= order.userId.contact %></p>
                </div>
                <div class="col-md-6">
                    <h5>Order Info</h5>
                    <p><strong>Shipping:</strong> <%= order.shipping %></p>
                    <p><%= order.shippingAddress.fullName %>, <%= order.shippingAddress.address %>,<br>
                       <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %>, <%= order.shippingAddress.postalCode %></p>
                    <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                    <p><strong>Status:</strong> <%= order.orderStatus%></p>
                </div>
            </div>
            
            <% if ((order.orderStatus === "Pending" || order.orderStatus === "Confirmed" || order.orderStatus === "Shipped") 
    && cancelableProductsCount > 0) { %>
    <button class="btn btn-warning mt-3" id="cancelOrder" onclick="cancelOrder('<%= order._id %>')">Cancel Order</button>
<% } else if (order.orderStatus === "Order Pending") { %>
    <button class="btn btn-danger mt-3" id="retryPayment" onclick="retryPayment('<%= order._id %>')">Retry Payment</button>
<% } %>
 <a href="/invoice/<%= order._id %>" class="btn btn-primary mt-3 ms-2">
    Download Invoice PDF
</a>

            <% if (!allProductsReturned && hasReturnableProducts) { %>
                <button class="btn btn-danger mt-3" id="returnOrder" 
                        data-bs-toggle="modal" data-order-id="<%= order._id %>" 
                        data-bs-target="#returnModal">
                    Return Order
                </button>
            <% } %>
        </div>
    </div>


<!-- Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Return Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <input type="hidden" id="returnOrderId">
                    <input type="hidden" id="returnProductId">
                    <input type="hidden" id="returnProductOrderId">

                    <label for="reason">Select a Reason:</label>
                    <select class="form-select" id="reason" required>
                        <option value="Damaged product">Damaged product</option>
                        <option value="Wrong item received">Wrong item received</option>
                        <option value="Not as described">Not as described</option>
                        <option value="Other">Other</option>
                    </select>

                    <div class="mt-2">
                        <label for="customReason">Additional Details (Optional):</label>
                        <textarea class="form-control" id="customReason" placeholder="Enter additional details..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-danger" onclick="submitReturn()">Submit Return</button>
            </div>
        </div>
    </div>
</div>

<!-- Return All Products Modal -->
<div class="modal fade" id="returnAllModal" tabindex="-1" aria-labelledby="returnAllModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnAllModalLabel">Return All Products</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to return all products in this order?</p>

                <label for="returnAllReason">Select a Reason:</label>
                <select class="form-select" id="returnAllReason" required>
                    <option value="Damaged product">Damaged product</option>
                    <option value="Wrong item received">Wrong item received</option>
                    <option value="Not as described">Not as described</option>
                    <option value="Other">Other</option>
                </select>

                <div class="mt-2">
                    <label for="returnAllCustomReason">Additional Details (Optional):</label>
                    <textarea class="form-control" id="returnAllCustomReason" placeholder="Enter additional details..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger" onclick="submitReturnAll()">Submit Return</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Success</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="text-success fw-bold">Your request has been submitted successfully!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cancelSuccessModal" tabindex="-1" aria-labelledby="cancelSuccessModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelSuccessModalLabel">Success</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="text-success fw-bold">Product has been successfully cancelled!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cancelErrorModal" tabindex="-1" aria-labelledby="cancelErrorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger" id="cancelErrorModalLabel">Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p id="cancelErrorMessage" class="text-danger fw-bold">An error occurred while cancelling the product.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Cancel Reason Modal - For both product and order cancellations -->
<div class="modal fade" id="cancelReasonModal" tabindex="-1" aria-labelledby="cancelReasonModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelReasonModalLabel">Cancel Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="cancelReasonForm">
                    <input type="hidden" id="cancelOrderId">
                    <input type="hidden" id="cancelProductId">
                    <input type="hidden" id="cancelProductOrderId">
                    <input type="hidden" id="cancelType" value="product"> <!-- 'product' or 'order' -->

                    <label for="cancelReason">Select a Reason:</label>
                    <select class="form-select" id="cancelReason" required>
                        <option value="">-- Select a reason --</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Found better price elsewhere">Found better price elsewhere</option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Taking too long to deliver">Taking too long to deliver</option>
                        <option value="Other">Other</option>
                    </select>

                    <div class="mt-3">
                        <label for="cancelCustomReason">Additional Details (Optional):</label>
                        <textarea class="form-control" id="cancelCustomReason" placeholder="Enter additional details..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" onclick="submitCancelRequest()">Submit</button>
            </div>
        </div>
    </div>
</div>

<!-- Order Cancellation Success Modal -->
<div class="modal fade" id="orderCancelSuccessModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-success">Order Cancelled</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="fas fa-check-circle text-success" style="font-size: 50px;"></i>
                <p class="mt-2">Your cancel request has been submitted successfully!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="reloadPage()">OK</button>
            </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
// Function to open the return modal for a specific product
function openReturnModal(orderId, productId, productOrderId) {
    console.log("openReturnModal called with:", { orderId, productId, productOrderId });

    if (!orderId || !productId || !productOrderId) {
        console.error("Missing parameters in openReturnModal!", { orderId, productId, productOrderId });
        return;
    }

    // Set the values in the hidden form fields
    document.getElementById('returnOrderId').value = orderId;
    document.getElementById('returnProductId').value = productId;
    document.getElementById('returnProductOrderId').value = productOrderId;

    // Show the return modal
    var returnModal = new bootstrap.Modal(document.getElementById('returnModal'));
    returnModal.show();
}

// Function to submit the return request
async function submitReturn() {
    // Get all necessary values from the form
    const orderId = document.getElementById('returnOrderId').value;
    const productId = document.getElementById('returnProductId').value;
    const productOrderId = document.getElementById('returnProductOrderId').value;
    const reason = document.getElementById('reason').value;
    const customReason = document.getElementById('customReason').value;

    // Validate required fields
    if (!orderId || !productId || !productOrderId) {
        alert("Order ID, Product ID, and Product Order ID are required.");
        return;
    }

    if (!reason) {
        alert("Please select a reason for return.");
        return;
    }

    try {
        console.log('Submitting return request...', { orderId, productOrderId, productId, reason });

        // Make API call to the server
        const response = await fetch(`/returnRequested/${orderId}/${productOrderId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                productId, 
                reason, 
                customReason,
                singleProductReturn: true // Flag to indicate it's a single product return
            })
        });
        console.log("Response received:", response);

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Return response:", data);

        if (data.success) {
            // Close the return modal
            var returnModal = bootstrap.Modal.getInstance(document.getElementById('returnModal'));
            if (returnModal) {
                returnModal.hide();
            }
            
            // Show success message
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();

            // Reload the page after a short delay
            setTimeout(() => {
                location.reload();
            }, 2000);
        } else {
            alert('Error processing return request: ' + data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Something went wrong. Please try again.');
    }
}

// Add event listeners when the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Add event listener for the return order button (full order return)
    const returnOrderBtn = document.getElementById('returnOrder');
    if (returnOrderBtn) {
        returnOrderBtn.addEventListener('click', function(e) {
            e.preventDefault();
            const orderId = this.getAttribute('data-order-id');
            console.log('Return Order Button Clicked, orderId:', orderId);
            
            // Store the orderId for later use
            document.getElementById('returnAllModal').setAttribute('data-order-id', orderId);
            
            // Show the return all products modal
            const returnAllModal = new bootstrap.Modal(document.getElementById('returnAllModal'));
            returnAllModal.show();
        });
    }
    
    // Find all return product buttons and attach event listeners
    document.querySelectorAll('.btn-return-product').forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const productId = this.getAttribute('data-product-id');
            const productOrderId = this.getAttribute('data-product-order-id');
            openReturnModal(orderId, productId, productOrderId);
        });
    });
});

// Function to submit a return for all products in an order
async function submitReturnAll() {
    const orderId = document.getElementById('returnAllModal').getAttribute('data-order-id');
    const reason = document.getElementById('returnAllReason').value;
    const customReason = document.getElementById('returnAllCustomReason').value;
    
    if (!reason) {
        alert("Please select a reason for return.");
        return;
    }
    
    try {
        console.log('Submitting return for entire order:', orderId);
        
        const response = await fetch(`/requestReturn/${orderId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ reason, customReason })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Return response:', data);
        
        if (data.success) {
            // Close the return all modal
            var returnAllModal = bootstrap.Modal.getInstance(document.getElementById('returnAllModal'));
            if (returnAllModal) {
                returnAllModal.hide();
            }
            
            // Show success message
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();

            // Reload the page after a short delay
            setTimeout(() => {
                location.reload();
            }, 2000);
        } else {
            alert(data.message || 'Failed to submit return request.');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Something went wrong. Please try again.');
    }
}

// Helper function to create modals programmatically if they don't exist
function ensureModalExists(id, title, bodyContent, successBtnText = 'OK') {
    if (!document.getElementById(id)) {
        const modalHTML = `
            <div class="modal fade" id="${id}" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${title}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            ${bodyContent}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-success" data-bs-dismiss="modal">${successBtnText}</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        const div = document.createElement('div');
        div.innerHTML = modalHTML;
        document.body.appendChild(div.firstChild);
    }
}

// Function to handle errors with a modal
function showErrorModal(message) {
    ensureModalExists(
        'errorModal', 
        'Error', 
        `<p class="text-danger">${message}</p>`, 
        'Close'
    );
    
    const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
    errorModal.show();
}

// Function to handle success with a modal
function showSuccessModal(message) {
    ensureModalExists(
        'successModal', 
        'Success', 
        `<p class="text-success">${message}</p>`, 
        'OK'
    );
    
    const successModal = new bootstrap.Modal(document.getElementById('successModal'));
    successModal.show();
}
function cancelProduct(orderId, productId) {
    console.log("cancelProduct called with:", { orderId, productId });

    if (!orderId || !productId) {
        console.error("Missing parameters in cancelProduct!", { orderId, productId });
        return;
    }

    // Set values in the hidden fields
    document.getElementById('cancelOrderId').value = orderId;
    document.getElementById('cancelProductId').value = productId;
    document.getElementById('cancelType').value = 'product'; // Indicate it's a product cancellation

    // Update modal title
    document.getElementById('cancelReasonModalLabel').textContent = 'Cancel Product';

    // Show the cancel reason modal
    var cancelModal = new bootstrap.Modal(document.getElementById('cancelReasonModal'));
    cancelModal.show();
}
async function submitCancelRequest() {
    const orderId = document.getElementById('cancelOrderId').value;
    const productId = document.getElementById('cancelProductId').value;
    const cancelType = document.getElementById('cancelType').value;
    const reason = document.getElementById('cancelReason').value;
    const customReason = document.getElementById('cancelCustomReason').value;

    if (!reason) {
        alert("Please select a reason for cancellation.");
        return;
    }

    try {
        let url, requestBody;

        if (cancelType === 'product') {
            if (!productId) {
                alert("Missing product information.");
                return;
            }
            url = `/cancelProduct/${orderId}`;
            requestBody = { productId, reason, customReason };
        } else {
            url = `/orderCancel/${orderId}`;
            requestBody = { reason, customReason };
        }

        console.log(`Submitting ${cancelType} cancellation request...`, requestBody);

        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Cancellation response:", data);

        var cancelReasonModal = bootstrap.Modal.getInstance(document.getElementById('cancelReasonModal'));
        cancelReasonModal.hide();

        if (data.success) {
            var successModal = new bootstrap.Modal(document.getElementById('cancelSuccessModal'));
            successModal.show();

            setTimeout(() => {
                location.reload();
            }, 2000);
        } else {
            document.getElementById('cancelErrorMessage').textContent = data.message || 'An error occurred while processing your request.';
            var errorModal = new bootstrap.Modal(document.getElementById('cancelErrorModal'));
            errorModal.show();
        }
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('cancelErrorMessage').textContent = 'Something went wrong. Please try again.';
        var errorModal = new bootstrap.Modal(document.getElementById('cancelErrorModal'));
        errorModal.show();
    }
}



// Function to reload the page
function reloadPage() {
    location.reload();
}



function retryPayment(orderId) {
    fetch('/create-razorpay-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId })  
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const options = {
                key: data.razorpayKeyId,
                amount: data.amount,
                currency: "INR",
                name: "Your Store Name",
                description: "Retry Payment for Order",
                order_id: data.orderId,
                handler: function (response) {
                    verifyPayment({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature,
                        order_id: data.yourOrderId
                    });
                }
            };

            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            alert(data.message || "Failed to retry payment. Please try again.");
        }
    })
    .catch(error => {
        console.error(" Error:", error);
        alert("An error occurred: " + error.message);
    });
}


</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<%- include("../../views/partials/users/footer.ejs") %>