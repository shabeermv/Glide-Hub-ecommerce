<%-include("../../views/partials/users/header.ejs")%>

<main class="main">
    <div class="page-header text-center" style="background-image: url('/asset3/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Checkout<span>Shop</span></h1>
            
        </div><!-- End .container -->
    </div><!-- End .page-header -->
    <nav aria-label="breadcrumb" class="breadcrumb-nav">
        <div class="container">
            <%- include("../../views/partials/breadcrumps.ejs") %>
        </div><!-- End .container -->
    </nav>
   
    <div class="page-content">
        <div class="checkout">
            <div class="container">
                <div class="coupon-container">
                    <% if (applicableCoupons.length > 0) { %>
                        <h3>Available Coupons</h3>
                        <div class="coupon-grid">
                            <% applicableCoupons.forEach(coupon => { %>
                                <div class="coupon-card">
                                    <div class="coupon-left">
                                        <h2><%= coupon.discount === 'percentage' ? coupon.discountValue + '%' : '₹' + coupon.discountValue %> OFF</h2>
                                        <p>On purchases above ₹<%= coupon.minPurchase %></p>
                                    </div>
                                    <div class="coupon-right">
                                        <p class="coupon-code"><%= coupon.code %></p>
                                        <button class="apply-coupon-btn" data-code="<%= coupon.code %>">Apply</button>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <p>No available coupons at the moment.</p>
                    <% } %>
                </div>
                <!-- End .checkout-discount -->
                
                <!-- Toggle Button for Address Form -->
                <div class="row mb-4">
                    <div class="col-12">
                        <button type="button" id="toggle-address-btn" class="btn btn-outline-primary-2">
                            <span id="btn-text">Add New Address</span>
                        </button>
                    </div>
                </div>
                
                <form id="checkout-form">
                    <div class="row">
                        <div class="col-lg-9">
                            
                            <div id="billing-details-section">
                                <h2 class="checkout-title">Billing Details</h2>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>First Name *</label>
                                        <input type="text" class="form-control" id="fName" required 
                                            value="<%= user.username ? user.username.split(' ')[0] : '' %>" style="height: 50px;">
                                    </div>

                                    <div class="col-sm-6">
                                        <label>Last Name *</label>
                                        <input type="text" class="form-control" id="lName" required 
                                            value="<%= user.username ? user.username.split(' ')[1] || '' : '' %>" style="height: 50px;">
                                    </div>
                                </div>

                                <label>Company Name (Optional)</label>
                                <input type="text" class="form-control" id="cName" style="height: 50px;">

                                <label>Country *</label>
                                <input type="text" class="form-control" id="country" required
                                    value="<%= user.address.length > 0 ? user.address[0].country : '' %>" style="height: 50px;">

                                <label>Street address *</label>
                                <input type="text" class="form-control" placeholder="House number and Street name" id="sAddress" required 
                                    value="<%= user.address.length > 0 ? user.address[0].address : '' %>" style="height: 50px;">

                                <label>Land mark *</label>
                                <input type="text" id="lMark" class="form-control" style="height: 50px;" 
                                    placeholder="Apartments, suite, unit etc ..." required>

                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>Town / City *</label>
                                        <input type="text" class="form-control" id="city" required 
                                            value="<%= user.address.length > 0 ? user.address[0].city : '' %>" style="height: 50px;">
                                    </div>

                                    <div class="col-sm-6">
                                        <label>State / County *</label>
                                        <input type="text" class="form-control" id="state" required 
                                            value="<%= user.address.length > 0 ? user.address[0].state : '' %>" style="height: 50px;">
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>Postcode / ZIP *</label>
                                        <input type="text" class="form-control" id="pCode" required 
                                            value="<%= user.address.length > 0 ? user.address[0].postCode : '' %>" style="height: 50px;">
                                    </div>

                                    <div class="col-sm-6">
                                        <label>Phone *</label>
                                        <input type="tel" class="form-control" id="mobile" required 
                                            value="<%= user.contact || '' %>" style="height: 50px;">
                                    </div>
                                </div>

                                <label>Email address *</label>
                                <input type="email" class="form-control" id="email" required 
                                    value="<%= user.email || '' %>" style="height: 50px;">

                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="checkout-create-acc">
                                    <label class="custom-control-label" for="checkout-create-acc">Create an account?</label>
                                </div>

                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="checkout-diff-address">
                                    <label class="custom-control-label" for="checkout-diff-address">Ship to a different address?</label>
                                </div>

                                <label>Order notes (optional)</label>
                                <textarea class="form-control" id="orderNote" cols="30" rows="4" 
                                    placeholder="Notes about your order, e.g. special notes for delivery"></textarea>
                            </div>

                            <!-- New Address Form (Initially Hidden) -->
                            <div id="new-address-form" style="display: none;">
                                <h2 class="checkout-title">Add New Address</h2>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>First Name *</label>
                                        <input type="text" class="form-control" id="new-fName" required style="height: 50px;">
                                    </div>

                                    <div class="col-sm-6">
                                        <label>Last Name *</label>
                                        <input type="text" class="form-control" id="new-lName" required style="height: 50px;">
                                    </div>
                                </div>

                                <label>Company Name (Optional)</label>
                                <input type="text" class="form-control" id="new-cName" style="height: 50px;">

                                <label>Country *</label>
                                <input type="text" class="form-control" id="new-country" required style="height: 50px;">

                                <label>Street address *</label>
                                <input type="text" class="form-control" placeholder="House number and Street name" id="new-sAddress" required style="height: 50px;">

                                <label>Land mark *</label>
                                <input type="text" id="new-lMark" class="form-control" style="height: 50px;" 
                                    placeholder="Apartments, suite, unit etc ..." required>

                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>Town / City *</label>
                                        <input type="text" class="form-control" id="new-city" required style="height: 50px;">
                                    </div>

                                    <div class="col-sm-6">
                                        <label>State / County *</label>
                                        <input type="text" class="form-control" id="new-state" required style="height: 50px;">
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>Postcode / ZIP *</label>
                                        <input type="text" class="form-control" id="new-pCode" required style="height: 50px;">
                                    </div>

                                    <div class="col-sm-6">
                                        <label>Phone *</label>
                                        <input type="tel" class="form-control" id="new-mobile" required style="height: 50px;">
                                    </div>
                                </div>

                                <div class="row mt-4">
                                    <div class="col-12">
                                        <button type="button" id="save-address-btn" class="btn btn-outline-primary-2">
                                            Save New Address
                                        </button>
                                        <button type="button" id="cancel-address-btn" class="btn btn-outline-secondary ml-2">
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div><!-- End .col-lg-9 -->
                        <aside class="col-lg-3">
                            <div class="summary">
                                <h3 class="summary-title">Your Order</h3><!-- End .summary-title -->

                                <table class="table table-summary">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                   <tbody>
  <% let subtotal = 0; %>

  <% products.forEach(product => { %>
    <tr>
      <td>
        <a href="#"><%= product.productId?.title || 'Unnamed Product' %></a>
        <% if (product.size) { %>
          <br><small>Size: <%= product.size %></small>
        <% } %>
        <% if (product.quantity > 1) { %>
          <br><small>Qty: <%= product.quantity %></small>
        <% } %>
        <% if (product.offerDiscount && product.offerDiscount > 0) { %>
          <br><small class="badge bg-danger">Discount Applied</small>
        <% } %>
      </td>

      <td>
        <% if (product.totalPriceWithOffer && product.totalPriceWithOffer < product.totalPrice) { %>
          <span class="original-price" style="text-decoration: line-through; color: #999;">
            ₹<%= product.totalPrice.toFixed(2) %>
          </span>
          <br>
          <span class="discounted-price" style="color: #4CAF50; font-weight: bold;">
            ₹<%= product.totalPriceWithOffer.toFixed(2) %>
          </span>
          <% subtotal += product.totalPriceWithOffer; %>
        <% } else { %>
₹<%= product.totalPrice.toFixed(2) %>
          <% subtotal += product.totalPrice; %>
        <% } %>
      </td>

      <!-- ✅ Hidden Inputs for Backend -->
      <input type="hidden" class="product-id" value="<%= product.productId?._id %>">
      <input type="hidden" class="product-size" value="<%= product.size %>">
      <input type="hidden" class="product-quantity" value="<%= product.quantity %>">
    </tr>
  <% }); %>

  <tr class="summary-subtotal">
    <td>Subtotal:</td>
    <td>₹<%= subtotal.toFixed(2) %></td>
  </tr>
  <tr>
    <td>Shipping:</td>
    <td>Free shipping</td>
  </tr>
  <tr class="summary-total" id="finalAmount">
    <td>Total:</td>
    <td>₹<%= subtotal.toFixed(2) %></td>
  </tr>
</tbody>


                                </table>
                                
                                <!-- Hidden input for total amount -->
                                <input type="hidden" id="finalAmountInput" value="<%= subtotal.toFixed(2) %>">
                                <input type="hidden" id="totalAmount" value="<%= subtotal.toFixed(2) %>">
                                
                                <div class="accordion-summary" id="accordion-payment">
                                    <div class="card">
                                        <div class="card-header" id="heading-6">
                                            <h2 class="card-title">
                                                <a class="collapsed" role="button" data-toggle="collapse" href="#collapse-6" aria-expanded="false" aria-controls="collapse-6">
                                                    Razorpay
                                                    <img src="https://cdn.razorpay.com/logo.svg" alt="Razorpay" style="height: 25px; margin-left: 10px;">
                                                </a>
                                            </h2>
                                        </div><!-- End .card-header -->
                                        <div id="collapse-6" class="collapse" aria-labelledby="heading-6" data-parent="#accordion-payment">
                                            <div class="card-body">
                                                Pay securely using credit/debit card, NetBanking, UPI, or Wallet through Razorpay. Your payment is processed securely and no card information is stored on our servers.
                                            </div><!-- End .card-body -->
                                        </div><!-- End .collapse -->
                                    </div>
                                    <div class="card">
                                        <div class="card-header" id="heading-wallet">
                                            <h2 class="card-title">
                                                <a class="collapsed" role="button" data-toggle="collapse" href="#collapse-wallet" aria-expanded="false" aria-controls="collapse-wallet">
                                                    Wallet Payment
                                                    <span class="float-right">Balance: ₹<span id="walletBalance">Loading...</span></span>
                                                </a>
                                            </h2>
                                        </div><!-- End .card-header -->
                                        <div id="collapse-wallet" class="collapse" aria-labelledby="heading-wallet" data-parent="#accordion-payment">
                                            <div class="card-body">
                                                <div class="wallet-info">
                                                    <p>Pay using your wallet balance. If your balance is insufficient, please choose another payment method.</p>
                                                    <div id="insufficient-balance-msg" class="text-danger mt-2" style="display: none;">
                                                        Insufficient wallet balance. Please add funds or choose another payment method.
                                                    </div>
                                                </div>
                                            </div><!-- End .card-body -->
                                        </div><!-- End .collapse -->
                                    </div><!-- End .card -->
                                    
                                    <% if (subtotal > 1000) { %>
                                        <div class="card">
                                            <div class="card-header" id="heading-3">
                                                <h2 class="card-title">
                                                    <a class="collapsed" role="button" data-toggle="collapse" href="#collapse-3" aria-expanded="false" aria-controls="collapse-3">
                                                        Cash on delivery
                                                    </a>
                                                </h2>
                                            </div><!-- End .card-header -->
                                            <div id="collapse-3" class="collapse" aria-labelledby="heading-3" data-parent="#accordion-payment">
                                                <div class="card-body">
                                                </div><!-- End .card-body -->
                                            </div><!-- End .collapse -->
                                        </div><!-- End .card -->
                                    <% } %>
                                </div><!-- End .accordion-summary -->
                                
                                <button type="button" id="btn-place-order" class="btn btn-outline-primary-2 btn-order btn-block" style="height: 50px;">
                                    <span class="btn-text">Place Order</span>
                                    <span class="btn-hover-text">Proceed to Checkout</span>
                                </button>
                            </div><!-- End .summary -->
                        </aside><!-- End .col-lg-3 -->
                    </div><!-- End .row -->
                </form>
            </div><!-- End .container -->
        </div><!-- End .checkout -->
    </div>
    <!-- Order Confirmation Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content text-center p-3">

      <!-- Close button top-right (optional) -->
      <button type="button" class="btn-close position-absolute end-0 mt-2 me-2" data-bs-dismiss="modal" aria-label="Close"></button>

      <!-- Success Icon -->
      <div class="mt-4 mb-3">
        <div class="success-animation d-inline-block">
          <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="80" height="80">
            <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" stroke="#28a745" stroke-width="2"/>
            <path class="checkmark__check" fill="none" stroke="#28a745" stroke-width="3" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
          </svg>
        </div>
      </div>

      <!-- Success Message -->
      <h4 class="text-success mb-3">Order Placed Successfully!</h4>

      <!-- Order Details -->
      <div class="order-details mb-3">
        <p class="mb-1">Order ID: <strong><span id="modalOrderId"></span></strong></p>
        <p class="mb-1">Total Amount: <strong><span id="modalOrderTotal"></span></strong></p>
        <p class="mb-0 text-muted small">
          A confirmation email has been sent to your registered email address.
        </p>
      </div>

      <!-- Redirect Info -->
      <div class="next-steps mb-3">
        <p class="text-muted small">You will be redirected to the homepage shortly...</p>
      </div>

      <!-- Footer Buttons -->
      <div class="modal-footer border-0 justify-content-center">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
        <a href="/profile" class="btn btn-primary">View Orders</a>
      </div>
    </div>
  </div>
</div>

</main>


<div id="paymentErrorModal" class="modaal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg"> <!-- Centered & Larger Size -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger">Payment Failed</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p id="paymentErrorMessage">Your payment was not successful. Please try again.</p>
            </div>
        </div>
    </div>
</div>
<!-- Missing Fields Modal -->
<!-- Missing Fields Modal - Modern Design -->
<div class="modal fade" id="missingFieldsModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg" style="border-radius: 20px; overflow: hidden;">
      <div class="modal-body p-0">
        <div class="text-center p-5">
          <!-- Animated Icon Container -->
          <div class="mb-4 d-inline-flex align-items-center justify-content-center rounded-circle" 
               style="width: 80px; height: 80px; background: linear-gradient(135deg, #FFA726 0%, #FF6F00 100%);">
            <i class="bi bi-exclamation-circle text-white" style="font-size: 2.5rem;"></i>
          </div>
          
          <h4 class="fw-bold mb-3" style="color: #2c3e50;">Missing Information</h4>
          <p id="missingFieldsBody" class="text-muted mb-4" style="font-size: 0.95rem; line-height: 1.6;">
            Please fill in all required fields to continue.
          </p>
          
          <button type="button" class="btn btn-lg px-5 py-2 border-0" 
                  data-bs-dismiss="modal"
                  style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                         color: white; border-radius: 50px; font-weight: 500;">
            Got it
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Payment Method Modal - Modern Design -->
<div class="modal fade" id="paymentMethodModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg" style="border-radius: 20px; overflow: hidden;">
      <!-- Gradient Header -->
      <div class="modal-header border-0 text-white position-relative" 
           style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); padding: 2rem;">
        <div class="w-100 text-center">
          <div class="mb-3 d-inline-flex align-items-center justify-content-center rounded-circle bg-white bg-opacity-25" 
               style="width: 60px; height: 60px;">
            <i class="bi bi-credit-card-2-front" style="font-size: 1.8rem;"></i>
          </div>
          <h5 class="modal-title fw-bold mb-0" style="font-size: 1.4rem;">Payment Method Required</h5>
        </div>
        <button type="button" class="btn-close btn-close-white position-absolute top-0 end-0 m-3" 
                data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      
      <div class="modal-body text-center p-4">
        <p class="text-muted mb-4" style="font-size: 0.95rem; line-height: 1.6;">
          Please select a payment method to proceed with your order.
        </p>
        
        <div class="d-flex gap-2 justify-content-center">
          <button type="button" class="btn btn-outline-secondary px-4 py-2" 
                  data-bs-dismiss="modal"
                  style="border-radius: 50px; font-weight: 500;">
            Cancel
          </button>
          <button type="button" class="btn px-4 py-2 border-0" 
                  data-bs-dismiss="modal"
                  style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                         color: white; border-radius: 50px; font-weight: 500;">
            Select Payment
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.coupon-container {
    margin-top: 20px;
    text-align:left;
}

.coupon-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: left;
}

.coupon-card {
    display: flex;
    width: 300px;
    background-color: #6a8759;
    color: white;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.coupon-left {
    flex: 2;
    padding: 15px;
    text-align: left;
}

.coupon-left h2 {
    margin: 0;
    font-size: 24px;
}

.coupon-left p {
    margin: 5px 0;
    font-size: 14px;
}

.coupon-right {
    flex: 1;
    background-color: white;
    color: black;
    text-align: center;
    padding: 15px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    border-left: 2px dashed #333;
}

.coupon-code {
    font-size: 14px;
    font-weight: bold;
    margin-bottom: 5px;
}

.apply-coupon-btn {
    background-color: #6a8759;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 12px;
}

.apply-coupon-btn:hover {
    background-color: #ecf1e8;
}

.success-animation {
    margin: 20px auto;
}

.checkmark {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: block;
    stroke-width: 2;
    stroke: #4bb71b;
    stroke-miterlimit: 10;
    box-shadow: inset 0px 0px 0px #4bb71b;
    animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
    margin: 0 auto;
}

.checkmark__circle {
    stroke-dasharray: 166;
    stroke-dashoffset: 166;
    stroke-width: 2;
    stroke-miterlimit: 10;
    stroke: #4bb71b;
    fill: none;
    animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
}

.checkmark__check {
    transform-origin: 50% 50%;
    stroke-dasharray: 48;
    stroke-dashoffset: 48;
    animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
}
/* Ensure the modal is fully centered */
.modaal {
    display: flex !important;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.7); /* Dark overlay effect */
}

/* Make the modal larger */
.modal-lg {
    max-width: 60%; /* Adjust width */
    min-height: 50vh; /* Adjust height */
}

/* Add hover effect on the entire screen when modal is active */
.modaal.show {
    background: rgba(0, 0, 0, 0.9); /* Darker overlay when modal is shown */
}

/* Add hover effect to modal */
.modal-content {
    transition: transform 0.3s ease-in-out;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.6); /* Stronger shadow */
}

.modal-content:hover {
    transform: scale(1.05); /* Slight zoom effect */
}


@keyframes stroke {
    100% {
        stroke-dashoffset: 0;
    }
}

@keyframes scale {
    0%, 100% {
        transform: none;
    }
    50% {
        transform: scale3d(1.1, 1.1, 1);
    }
}

@keyframes fill {
    100% {
        box-shadow: inset 0px 0px 0px 30px #4bb71b;
    }
}

/* Modal Styles */
#successModal .modal-content {
    border-radius: 15px;
    border: none;
}

#successModal .modal-header {
    padding: 1rem 1rem 0;
}

#successModal .modal-body {
    padding: 2rem;
}

#successModal .btn {
    padding: 0.6rem 1.5rem;
    border-radius: 5px;
}

#successModal .order-details {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
}

/* Button animation */
.btn-outline-primary-2 {
    transition: all 0.3s ease;
}

.btn-outline-primary-2:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
</style>

<!-- Add this script tag in your header or before the closing body tag -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const couponButtons = document.querySelectorAll(".apply-coupon-btn");
    const couponInput = document.getElementById("checkout-discount-input");

    couponButtons.forEach(button => {
        button.addEventListener("click", function() {
            const couponCode = this.getAttribute("data-code");
            couponInput.value = couponCode;
        });
    });
});

document.addEventListener('DOMContentLoaded', function() {
    const toggleAddressBtn = document.getElementById('toggle-address-btn');
    const billingDetailsSection = document.getElementById('billing-details-section');
    const newAddressForm = document.getElementById('new-address-form');
    const saveAddressBtn = document.getElementById('save-address-btn');
    const cancelAddressBtn = document.getElementById('cancel-address-btn');
    
    
    toggleAddressBtn.addEventListener('click', function() {
        if (billingDetailsSection.style.display !== 'none') {
            billingDetailsSection.style.display = 'none';
            newAddressForm.style.display = 'block';
            toggleAddressBtn.querySelector('#btn-text').textContent = 'Use Existing Address';
        } else {
            billingDetailsSection.style.display = 'block';
            newAddressForm.style.display = 'none';
            toggleAddressBtn.querySelector('#btn-text').textContent = 'Add New Address';
        }
    });
    
    saveAddressBtn.addEventListener('click', function() {
       
        const newFName = document.getElementById('new-fName').value;
        const newLName = document.getElementById('new-lName').value;
        const newCountry = document.getElementById('new-country').value;
        const newAddress = document.getElementById('new-sAddress').value;
        const newCity = document.getElementById('new-city').value;
        const newState = document.getElementById('new-state').value;
        const newPostCode = document.getElementById('new-pCode').value;
        const newMobile = document.getElementById('new-mobile').value;
        
        // Validate required fields
        if (!newFName || !newLName || !newCountry || !newAddress || !newCity || !newState || !newPostCode || !newMobile) {
            alert('Please fill in all required fields');
            return;
        }
        
        
        document.getElementById('fName').value = newFName;
        document.getElementById('lName').value = newLName;
        document.getElementById('country').value = newCountry;
        document.getElementById('sAddress').value = newAddress;
        document.getElementById('city').value = newCity;
        document.getElementById('state').value = newState;
        document.getElementById('pCode').value = newPostCode;
        document.getElementById('mobile').value = newMobile;
        
        
        billingDetailsSection.style.display = 'block';
        newAddressForm.style.display = 'none';
        toggleAddressBtn.querySelector('#btn-text').textContent = 'Add New Address';
        
        
        alert('New address saved successfully!');
    });
    
    cancelAddressBtn.addEventListener('click', function() {
        billingDetailsSection.style.display = 'block';
        newAddressForm.style.display = 'none';
        toggleAddressBtn.querySelector('#btn-text').textContent = 'Add New Address';
    });
});

document.addEventListener('DOMContentLoaded', function() {
  const applyButtons = document.querySelectorAll('.apply-coupon-btn');
  
  applyButtons.forEach(button => {
    button.addEventListener('click', function() {
      const couponCode = this.getAttribute('data-code');
      applyCoupon(couponCode);
    });
  });
  
  
  function applyCoupon(couponCode) {
    
    const subtotalElement = document.querySelector('.summary-subtotal td:last-child');
    const currentSubtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
    
    fetch('/apply-coupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        couponCode: couponCode,
        subtotal: currentSubtotal
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        
        const discount = data.discount || (currentSubtotal - data.discountedTotal);
        
        
        updateOrderSummary(data.discountedTotal, discount, data.couponCode);
        showMessage('Coupon applied successfully!', 'success');
        disableCouponButtons();
      } else {
        
        showMessage(data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Error applying coupon:', error);
      showMessage('An error occurred while applying the coupon.', 'error');
    });
  }
  
  
  function updateOrderSummary(discountedTotal, discount, couponCode) {
    const subtotalElement = document.querySelector('.summary-subtotal td:last-child');
    const totalElement = document.querySelector('.summary-total td:last-child');
    const subtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
    
    
    let discountRow = document.querySelector('.summary-discount');
    if (!discountRow) {
      
      const totalRow = document.querySelector('.summary-total');
      discountRow = document.createElement('tr');
      discountRow.className = 'summary-discount';
      
      const discountLabel = document.createElement('td');
      discountLabel.textContent = 'Discount:';
      
      const discountValue = document.createElement('td');
      discountValue.textContent = `- ₹${discount.toFixed(2)} (${couponCode})`;
      discountValue.style.color = '#4CAF50';
      
      discountRow.appendChild(discountLabel);
      discountRow.appendChild(discountValue);
      
     
      totalRow.parentNode.insertBefore(discountRow, totalRow);
    } else {
      
      discountRow.querySelector('td:last-child').textContent = `- ₹${discount.toFixed(2)} (${couponCode})`;
    }
    
    
    totalElement.textContent = `₹${discountedTotal.toFixed(2)}`;
    
    
    document.getElementById('finalAmountInput').value = discountedTotal.toFixed(2);
    
    
    let couponCodeInput = document.getElementById('couponCodeInput');
    let couponDiscountInput = document.getElementById('couponDiscountInput');
    
    if (!couponCodeInput) {
      couponCodeInput = document.createElement('input');
      couponCodeInput.type = 'hidden';
      couponCodeInput.id = 'couponCodeInput';
      couponCodeInput.name = 'couponCode';
      document.getElementById('finalAmountInput').parentNode.appendChild(couponCodeInput);
    }
    
    if (!couponDiscountInput) {
      couponDiscountInput = document.createElement('input');
      couponDiscountInput.type = 'hidden';
      couponDiscountInput.id = 'couponDiscountInput';
      couponDiscountInput.name = 'couponDiscount';
      document.getElementById('finalAmountInput').parentNode.appendChild(couponDiscountInput);
    }
    
    couponCodeInput.value = couponCode;
    couponDiscountInput.value = discount.toFixed(2);
    
    
    totalElement.classList.add('highlight');
    setTimeout(() => {
      totalElement.classList.remove('highlight');
    }, 1000);
  }
  
  
  function showMessage(message, type) {
    const messageContainer = document.createElement('div');
    messageContainer.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
    messageContainer.textContent = message;
    
    
    const checkoutContainer = document.querySelector('.checkout .container');
    checkoutContainer.insertBefore(messageContainer, checkoutContainer.firstChild);
    
    setTimeout(() => {
      messageContainer.remove();
    }, 5000);
  }
  
  function disableCouponButtons() {
    applyButtons.forEach(button => {
      button.disabled = true;
      button.classList.add('disabled');
      button.textContent = 'Applied';
    });
  }
  
  
  if (!document.getElementById('coupon-highlight-css')) {
    const style = document.createElement('style');
    style.id = 'coupon-highlight-css';
    style.textContent = `
      .highlight {
        animation: highlight-effect 1s ease;
      }
      @keyframes highlight-effect {
        0% { background-color: rgba(76, 175, 80, 0.3); }
        100% { background-color: transparent; }
      }
    `;
    document.head.appendChild(style);
  }
});


function createOrderAndInitiatePayment(formData) { 
  fetch('/create-razorpay-order', { 
    method: 'POST', 
    headers: { 'Content-Type': 'application/json' }, 
    body: JSON.stringify(formData)  // formData now includes products array
  }) 
  .then(response => response.json()) 
  .then(data => { 
    if (data.success) { 
      if (!data.orderId || !data.amount || !data.razorpayKeyId) { 
        throw new Error('Missing required data from server'); 
      } 
      const options = { 
        key: data.razorpayKeyId, 
        amount: data.amount, 
        currency: "INR", 
        name: "Your Store Name", 
        description: "Purchase Payment", 
        order_id: data.orderId, 
        prefill: { 
          name: formData.firstName + " " + formData.lastName, 
          email: formData.email, 
          contact: formData.phone 
        }, 
        notes: { 
          address: formData.streetAddress 
        }, 
        theme: { 
          color: "#3399cc" 
        }, 
        handler: function (response) { 
          verifyPayment({ 
            razorpay_payment_id: response.razorpay_payment_id, 
            razorpay_order_id: response.razorpay_order_id, 
            razorpay_signature: response.razorpay_signature, 
            order_id: data.yourOrderId,
            products: formData.products  // Pass products to verification
          }); 
        } 
      }; 
      const rzp = new Razorpay(options); 
      rzp.open(); 
      rzp.on("payment.failed", function (response) { 
        console.error("Payment failed:", response.error); 
        document.getElementById("paymentErrorMessage").textContent = response.error.description || "Your payment was not successful. Please try again."; 
        $("#paymentErrorModal").modal("show"); 
        handleFailedPayment(data.yourOrderId); 
      }); 
    } else { 
      alert(data.message || 'Failed to create order. Please try again.'); 
    } 
  }) 
  .catch(error => { 
    console.error('Error:', error); 
    alert('An error occurred: ' + error.message); 
  }); 
} 

function verifyPayment(paymentData) { 
  fetch('/verify-razorpay-payment', { 
    method: 'POST', 
    headers: { 'Content-Type': 'application/json' }, 
    body: JSON.stringify(paymentData)  // Now includes products
  }) 
  .then(response => { 
    if (!response.ok) { 
      throw new Error('Network response was not ok'); 
    } 
    return response.json(); 
  }) 
  .then(data => { 
    if (data.success) { 
      document.getElementById('modalOrderId').textContent = data.orderId || data._id || 'N/A'; 
      document.getElementById('modalOrderTotal').textContent = data.total || data.amount || 'N/A'; 
      const successModalEl = document.getElementById('successModal'); 
      const successModal = new bootstrap.Modal(successModalEl, { 
        backdrop: 'static', 
        keyboard: false 
      }); 
      successModal.show(); 
      setTimeout(() => { 
        window.location.href = '/shop'; 
      }, 5000); 
    } else { 
      alert(data.message || 'Payment verification failed. Please contact support.'); 
    } 
  }) 
  .catch(error => { 
    console.error('Error:', error); 
    alert('An error occurred during payment verification: ' + error.message); 
  }); 
} 
function handleFailedPayment(orderId) {
    fetch('/handle-failed-payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId })
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            console.error("Error updating failed payment status:", data.message);
        }
        
        // Show the failure modal
        document.getElementById("paymentErrorMessage").textContent = 
            data.message || "Your payment was not successful. Please try again.";
        
        $("#paymentErrorModal").modal("show");
        
        // Redirect to checkout page after showing the modal
        setTimeout(() => {
            $("#paymentErrorModal").modal("hide");
            window.location.href = '/cart-checkout'; // Redirect back to checkout page
        }, 2000);
    })
    .catch(error => {
        console.error("Error handling failed payment:", error);
        document.getElementById("paymentErrorMessage").textContent = 
            "An error occurred while processing your payment. Please try again.";

        $("#paymentErrorModal").modal("show");
        
        setTimeout(() => {
            $("#paymentErrorModal").modal("hide");
            window.location.href = '/cart-checkout'; // Redirect back to checkout page
        }, 5000);
    });
}
function submitOrderThroughRegularCheckout(formData) {
    fetch('/place-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            document.getElementById("modalOrderId").innerText = data.orderId;
      document.getElementById("modalOrderTotal").innerText = "₹" + data.totalAmount;

           const successModalEl = document.getElementById('successModal');
      const successModal = new bootstrap.Modal(successModalEl, { backdrop: 'static', keyboard: false });
      successModal.show();

            setTimeout(() => {
                window.location.href = '/';
            }, 5000);
        } else {
            alert(data.message || 'Order placement failed. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred: ' + error.message);
    });
}

document.addEventListener('DOMContentLoaded', function() {
  fetchWalletBalance();
  
  document.getElementById('btn-place-order').addEventListener('click', function(e) {
    e.preventDefault();

    let selectedPaymentMethod = '';
    const paymentDivs = document.querySelectorAll('.collapse.show');
    
     if (paymentDivs.length === 0) {
      const paymentModal = new bootstrap.Modal(document.getElementById('paymentMethodModal'));
      paymentModal.show();
      return;
    }
    paymentDivs.forEach(div => {
        const paymentTitle = div.previousElementSibling.querySelector('.card-title a').textContent.trim();
        selectedPaymentMethod = paymentTitle;
    });
    const productElements = document.querySelectorAll('.product-id');
const sizeElements = document.querySelectorAll('.product-size');
const quantityElements = document.querySelectorAll('.product-quantity');

const products = [];
for (let i = 0; i < productElements.length; i++) {
  products.push({
    productId: productElements[i].value.trim(),
    size: sizeElements[i].value.trim(),
    quantity: parseInt(quantityElements[i].value)
  });
}


    // Get values from the form
    const formData = {
        firstName: document.getElementById('fName').value,
        lastName: document.getElementById('lName').value,
        companyName: document.getElementById('cName').value || '',
        country: document.getElementById('country').value,
        streetAddress: document.getElementById('sAddress').value,
        landmark: document.getElementById('lMark').value || '',
        city: document.getElementById('city').value,
        state: document.getElementById('state').value,
        postCode: document.getElementById('pCode').value,
        phone: document.getElementById('mobile').value,
        email: document.getElementById('email').value,
        paymentMethod: selectedPaymentMethod,
        orderNotes: document.getElementById('orderNote').value || '',
        
        
        finalAmount: parseFloat(document.getElementById('finalAmountInput').value),
        
        
        totalAmount: parseFloat(document.getElementById('totalAmount').value),
        
        
        couponCode: document.getElementById('couponCodeInput')?.value || '',
        couponDiscount: parseFloat(document.getElementById('couponDiscountInput')?.value || 0),
        products: products
    };

    const requiredFields = ['firstName', 'lastName', 'country', 'streetAddress', 'city', 'state', 'postCode', 'phone', 'email'];
    const missingFields = requiredFields.filter(field => !formData[field]);

    if (missingFields.length > 0) {
      const modalBody = document.getElementById('missingFieldsBody');
      modalBody.textContent = 'Please fill in all required fields: ' + missingFields.join(', ');
      const missingFieldsModal = new bootstrap.Modal(document.getElementById('missingFieldsModal'));
      missingFieldsModal.show();
      return;
    }
    if (selectedPaymentMethod.includes('Razorpay')) {
        createOrderAndInitiatePayment(formData);
    } else if (selectedPaymentMethod.toLowerCase().includes('wallet')) {
        formData.paymentMethod = 'wallet';

        const walletBalance = parseFloat(document.body.dataset.walletBalance || 0);
        const finalAmount = parseFloat(formData.finalAmount);

        if (walletBalance < finalAmount) {
            document.getElementById('insufficient-balance-msg').style.display = 'block';
            showInsufficientBalanceModal(finalAmount, walletBalance);
            return;
        }
        submitWalletPayment(formData);
    } else {
        submitOrderThroughRegularCheckout(formData);
    }
  });
});

function fetchWalletBalance() {
  fetch('/wallet/balance')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        document.getElementById('walletBalance').textContent = data.balance.toFixed(2);
        
        document.body.dataset.walletBalance = data.balance;
        
        checkWalletBalance();
      } else {
        document.getElementById('walletBalance').textContent = '0.00';
        console.error('Error fetching wallet balance:', data.message);
      }
    })
    .catch(error => {
      console.error('Error fetching wallet balance:', error);
      document.getElementById('walletBalance').textContent = '0.00';
    });
}

function checkWalletBalance() {
  const walletBalance = parseFloat(document.body.dataset.walletBalance || 0);
  const orderTotal = parseFloat(document.getElementById('finalAmountInput').value || 0);
  
  // Show warning if balance is insufficient
  if (walletBalance < orderTotal) {
    document.getElementById('insufficient-balance-msg').style.display = 'block';
  } else {
    document.getElementById('insufficient-balance-msg').style.display = 'none';
  }
}

document.querySelectorAll('#accordion-payment .card-header').forEach(header => {
  header.addEventListener('click', function() {
    setTimeout(() => {
      const walletPaymentSelected = document.getElementById('collapse-wallet').classList.contains('show');
      
      if (walletPaymentSelected) {
        checkWalletBalance();
      } else {
        document.getElementById('insufficient-balance-msg').style.display = 'none';
      }
    }, 300);
  });
});

function submitWalletPayment(formData) {
    formData.paymentMethod = 'wallet';
    
    fetch('/process-wallet-payment', {  // Updated to match the backend route
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw err;  // This will be caught in the catch block below
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            document.getElementById('modalOrderId').textContent = data.orderId || 'N/A';
            document.getElementById('modalOrderTotal').textContent = `₹${formData.finalAmount.toFixed(2)}`;

            const successModalEl = document.getElementById('successModal');
      const successModal = new bootstrap.Modal(successModalEl, { backdrop: 'static', keyboard: false });
      successModal.show();

            setTimeout(() => {
                window.location.href = '/';
            }, 5000);
        } else {
            if (data.insufficientBalance) {
                showInsufficientBalanceModal(
                    parseFloat(formData.finalAmount), 
                    parseFloat(data.walletBalance || 0)
                );
            } else {
                alert(data.message || 'Payment failed. Please try again.');
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        
        if (error.insufficientBalance) {
            showInsufficientBalanceModal(
                parseFloat(formData.finalAmount), 
                parseFloat(error.walletBalance || 0)
            );
        } else {
            alert(error.message || 'An error occurred while processing your payment. Please try again.');
        }
    });
}


function showInsufficientBalanceModal(orderAmount, walletBalance) {
    
    if (!document.getElementById('insufficientBalanceModal')) {
        const modalHTML = `
        <div class="modal fade" id="insufficientBalanceModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Insufficient Wallet Balance</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center mb-4">
                            <i class="icon-wallet" style="font-size: 3rem; color: #dc3545;"></i>
                        </div>
                        <p>Your wallet balance is insufficient for this purchase.</p>
                        <div class="row">
                            <div class="col-6 text-right">Order Amount:</div>
                            <div class="col-6 text-left font-weight-bold" id="modalOrderAmount">₹0.00</div>
                        </div>
                        <div class="row">
                            <div class="col-6 text-right">Your Balance:</div>
                            <div class="col-6 text-left font-weight-bold" id="modalCurrentBalance">₹0.00</div>
                        </div>
                        <div class="row">
                            <div class="col-6 text-right">Shortage:</div>
                            <div class="col-6 text-left font-weight-bold text-danger" id="modalBalanceShortage">₹0.00</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Choose Another Payment</button>
                        <a href="/wallet/add-funds" class="btn btn-primary">Add Funds to Wallet</a>
                    </div>
                </div>
            </div>
        </div>`;
        
        const modalContainer = document.createElement('div');
        modalContainer.innerHTML = modalHTML;
        document.body.appendChild(modalContainer.firstChild);
    }
    
    // Update modal content
    document.getElementById('modalOrderAmount').textContent = `₹${orderAmount.toFixed(2)}`;
    document.getElementById('modalCurrentBalance').textContent = `₹${walletBalance.toFixed(2)}`;
    document.getElementById('modalBalanceShortage').textContent = `₹${(orderAmount - walletBalance).toFixed(2)}`;
    
    // Show modal
    $('#insufficientBalanceModal').modal('show');
}
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<%-include("../../views/partials/users/footer.ejs")%>