<%- include("../../views/partials/admin/header.ejs") %>

<link href="https://unpkg.com/cropperjs/dist/cropper.min.css" rel="stylesheet">
<main class="main-wrap">
    <header class="main-header navbar">
        <div class="col-search">
           
        </div>
        <div class="col-nav">
            <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"><i class="material-icons md-apps"></i></button>
            <ul class="nav">
                <li class="nav-item">
                    
                </li>
                <li class="nav-item">
                </li>
                <li class="nav-item">
                </li>
                <li class="dropdown nav-item">
                    
                </li>
                <li class="dropdown nav-item">
                    
                </li>
            </ul>
        </div>
    </header>
        
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" id="applyButton">Publish</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="product_title" class="form-label">Product title</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_title" required />
                        </div>
                        <div class="row gx-2">
                            <div class="col-md-4 mb-3">
                                <label for="product_color" class="form-label">Color</label>
                                <input type="text" placeholder="Type here" class="form-control" id="product_color" />
                            </div>
                            <div class="col-md-8 mb-3">
                                <label for="product_size" class="form-label">Size Management</label>
                                <div class="size-management">
                                    <input type="text" placeholder="Type size here" class="form-control mb-2" id="product_size" />
                                    <input type="number" placeholder="Enter stock for size" class="form-control mb-2" id="size_stock" />
                                    <button type="button" id="addSizeButton" class="btn btn-sm btn-primary">Add Size with Stock</button>
                                </div>
                                <div id="sizeList" class="mt-3">
                                    <!-- Size items will be added here dynamically -->
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="product_brand" class="form-label">Brand</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_brand" required />
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <div>
                            <label class="form-label">Description</label>
                            <textarea placeholder="Type here" class="form-control" rows="4" id="product_description"></textarea>
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <div>
                            <label class="form-label" for="product_images">Images</label>
                            <input type="file" id="product_images" accept="image/*" name="images" multiple>
                            <div id="image-preview-container" class="mt-3"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label">Price</label>
                            <input type="number" placeholder="Type here" class="form-control" id="product_price" required />
                            <div id="product_price_error" class="text-danger"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select" id="product_status" name="category">
                                <option disabled selected>Select a Category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center p-4">
                <div class="mb-3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="green" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check-circle">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                </div>
                <h4 class="mb-3">Product Added Successfully!</h4>
                <p class="text-muted">Your product has been added to the catalog.</p>
            </div>
        </div>
    </div>
</div>


<script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>

<style>
      .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100% - 1rem);
    }
    .image-wrapper {
        position: relative;
        display: inline-block;
        margin: 10px;
    }
    .image-preview {
        max-width: 200px;
        max-height: 200px;
        display: block;
    }
    .crop-button {
        display: block;
        margin-top: 5px;
    }
    .size-item {
        background-color: #f8f9fa;
        padding: 8px;
        border-radius: 4px;
    }
    .current-image-wrapper {
        display: inline-block;
        margin: 10px;
        position: relative;
    }
    .current-image {
        max-width: 200px;
        max-height: 200px;
        display: block;
    }
    .remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
    }
</style>

<script>
    let sizesWithStock = [];
    let croppers = [];
    let croppedImages = [];

    // Handle size stock updates
    function handleStockInputChange(input, size) {
        const newStock = parseInt(input.value);
        if (isNaN(newStock) || newStock < 0) {
            alert('Please enter a valid stock number');
            input.value = input.dataset.originalStock;
            return;
        }
        
        const sizeIndex = sizesWithStock.findIndex(s => s.size === size);
        if (sizeIndex !== -1) {
            sizesWithStock[sizeIndex].stock = newStock;
        }
    }

    // Add new size with stock
    document.getElementById('addSizeButton').addEventListener('click', () => {
        const sizeInput = document.getElementById('product_size').value.trim();
        const sizeStockInput = document.getElementById('size_stock').value.trim();

        if (!sizeInput) {
            alert('Please enter a size.');
            return;
        }
        if (!sizeStockInput || isNaN(sizeStockInput) || sizeStockInput <= 0) {
            alert('Please enter a valid stock number.');
            return;
        }

        if (!sizesWithStock.some(size => size.size === sizeInput)) {
            const newSize = { size: sizeInput, stock: Number(sizeStockInput) };
            sizesWithStock.push(newSize);

            const sizeList = document.getElementById('sizeList');
            const newSizeElement = document.createElement('div');
            newSizeElement.className = 'size-item d-flex align-items-center mb-2';
            newSizeElement.dataset.size = sizeInput;
            newSizeElement.innerHTML = `
                <span class="me-2">${sizeInput} - Stock: </span>
                <input type="number" class="form-control form-control-sm size-stock-input me-2" 
                       value="${sizeStockInput}" style="width: 80px;"
                       data-original-stock="${sizeStockInput}">
                <button type="button" class="btn btn-sm btn-danger delete-size">Delete</button>
            `;

            // Add event listeners to new elements
            const deleteButton = newSizeElement.querySelector('.delete-size');
            deleteButton.addEventListener('click', function() {
                sizesWithStock = sizesWithStock.filter(s => s.size !== sizeInput);
                newSizeElement.remove();
            });

            const stockInput = newSizeElement.querySelector('.size-stock-input');
            stockInput.addEventListener('change', function() {
                handleStockInputChange(this, sizeInput);
            });

            sizeList.appendChild(newSizeElement);
            document.getElementById('product_size').value = '';
            document.getElementById('size_stock').value = '';
        } else {
            alert('This size already exists.');
        }
    });

    // Handle image selection and cropping
    const imageInput = document.getElementById('product_images');
    const imagePreviewContainer = document.getElementById('image-preview-container');

    imageInput.addEventListener('change', function(event) {
        imagePreviewContainer.innerHTML = '';
        croppers = [];
        croppedImages = [];

        const files = event.target.files;
        if (files.length === 0) return;

        Array.from(files).forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const imgWrapper = document.createElement('div');
                imgWrapper.classList.add('image-wrapper');
                imgWrapper.innerHTML = `
                    <img src="${e.target.result}" class="image-preview" id="image-${index}">
                    <button type="button" class="btn btn-sm btn-success crop-button" data-index="${index}">Crop</button>
                `;
                imagePreviewContainer.appendChild(imgWrapper);

                const imgElement = document.getElementById(`image-${index}`);
                const cropper = new Cropper(imgElement, {
                    aspectRatio: 1,
                    viewMode: 1,
                });

                croppers[index] = cropper;

                imgWrapper.querySelector('.crop-button').addEventListener('click', () => {
                    const canvas = cropper.getCroppedCanvas();
                    croppedImages[index] = canvas.toDataURL('image/png');
                    imgElement.src = croppedImages[index];
                    cropper.destroy();
                });
            };
            reader.readAsDataURL(file);
        });
    });

    // Handle form submission
    document.getElementById('applyButton').addEventListener('click', () => {
        const productName = document.getElementById('product_title').value.trim();
        const productDescription = document.getElementById('product_description').value.trim();
        const productBrand = document.getElementById('product_brand').value.trim();
        const productPrice = document.getElementById('product_price').value.trim();
        const productStatus = document.getElementById('product_status').value;
        const productColor = document.getElementById('product_color').value;

        if (!productName || !productDescription || !productBrand || !productPrice || !productColor) {
            alert('Please fill in all required fields.');
            return;
        }

        if (sizesWithStock.length === 0) {
            alert('Please add at least one size with stock.');
            return;
        }

        if (isNaN(productPrice) || productPrice <= 0) {
            document.getElementById('product_price_error').textContent = 'Price must be a positive number.';
            return;
        }

        if (croppedImages.length === 0) {
            alert('You must crop and upload at least 1 image.');
            return;
        }

        const formData = new FormData();
        formData.append('title', productName);
        formData.append('description', productDescription);
        formData.append('brandName', productBrand);
        formData.append('color', productColor);
        formData.append('price', productPrice);
        formData.append('category', productStatus);
        formData.append('sizesWithStock', JSON.stringify(sizesWithStock));

        croppedImages.forEach((imageData, index) => {
            if (imageData) {
                const blob = dataURLtoBlob(imageData);
                formData.append('images', blob, `cropped-image-${index}.png`);
            }

        });

fetch('/admin/addProduct', {
    method: 'POST',
    body: formData,
})
.then(response => response.json())
.then(data => {
    if (data.success) {
                // Show Bootstrap Modal
                const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                successModal.show();

                // Automatically hide modal and redirect after 2 seconds
                setTimeout(() => {
                    successModal.hide();
                    window.location.href = '/admin/products';
                }, 2000);
            } else {
                alert('Error adding product: ' + data.message);
            }
})
.catch(err => {
    console.error('Error:', err);
    alert('An error occurred while adding the product.');
});
});

// Helper function to convert data URL to Blob
function dataURLtoBlob(dataURL) {
const byteString = atob(dataURL.split(',')[1]);
const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
const ab = new ArrayBuffer(byteString.length);
const ia = new Uint8Array(ab);
for (let i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
}
return new Blob([ab], { type: mimeString });
}
</script>

<%- include("../../views/partials/admin/footer.ejs") %>