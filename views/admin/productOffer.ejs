<%- include("../../views/partials/admin/header.ejs") %>

<main class="main-wrap">
    <header class="main-header navbar">
        <div class="col-search">
            
        </div>
    </header>

    <section class="content-main">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3>Product Offers</h3>
            <button id="toggleFormBtn" class="btn btn-primary">
                <i class="material-icons md-add"></i> Add New Offer
            </button>
        </div>

        <!-- Display existing offers in cards -->
        <div class="row">
            <% if (productOffers.length > 0) { %>
                <% productOffers.forEach(offer => { %>
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title"><%= offer.description %></h5>
                                <p class="card-text">
                                    <strong>Product:</strong> 
                                    <% if (offer.productId) { %>
                                        <%= offer.productId.title %>
                                    <% } else { %>
                                        <span style="color: red;">Product Not Found</span>
                                    <% } %> 
                                    <br>
                                    <strong>Discount:</strong> 
                                    <% if (offer.discountType === 'percentage') { %>
                                        <%= offer.discountValue %>% Off
                                    <% } else { %>
                                        ₹<%= offer.discountValue %> Off
                                    <% } %><br>
                                    <strong>Period:</strong> 
                                    <%= new Date(offer.startDate).toLocaleDateString() %> to 
                                    <%= new Date(offer.endDate).toLocaleDateString() %>
                                </p>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-sm btn-outline-danger me-2" onclick="deleteOffer('<%= offer._id %>')">Delete</button>
                                    <button class="btn btn-sm btn-outline-primary" onclick="editOffer('<%= offer._id %>', '<%= offer.description %>', '<%= offer.discountType %>', '<%= offer.discountValue %>', '<%= offer.startDate %>', '<%= offer.endDate %>')">Edit</button>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <div class="col-12">
                    <div class="card">
                        <div class="card-body text-center">
                            <p>No product offers created yet.</p>
                        </div>
                    </div>
                </div>
            <% } %>
        </div>
        
        <!-- Form card (initially hidden) -->
        <div class="card mb-4" id="offerFormCard" style="display: none;">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0" id="formTitle">Add New Product Offer</h5>
                <button type="button" class="btn-close" id="closeFormBtn"></button>
            </div>
            <div class="card-body">
                <form id="categoryOfferForm">
                    <input type="hidden" id="offerId" name="offerId" value="">
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <input type="text" class="form-control" id="description" name="description" required>
                    </div>

                    <div class="mb-3">
                        <label for="selectedProduct" class="form-label">Select Products</label>
                        <select class="form-select" id="selectedProduct" name="selectedProduct" required>
                            <% if(locals.products && products.length > 0) { %>
                                <% products.forEach(product => { %>
                                    <option value="<%= product._id %>"><%= product.title %></option>
                                <% }); %>
                            <% } %>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="discountType" class="form-label">Discount Type</label>
                        <select class="form-select" id="discountType" name="discountType" required>
                            <option value="percentage">Percentage (%)</option>
                            <option value="fixed">Fixed Amount (₹)</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="discountValue" class="form-label">Discount Value</label>
                        <input type="number" class="form-control" id="discountValue" name="discountValue" required>
                    </div>

                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="startDate" required>
                    </div>

                    <div class="mb-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="endDate" required>
                    </div>

                    <div class="d-grid">
                        <button type="submit" id="submitBtn" class="btn btn-primary">Add Offer</button>
                    </div>
                </form>
            </div>
            
        </div>
        <div id="editOfferModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="document.getElementById('editOfferModal').style.display='none'">&times;</span>
                <h2>Edit Offer</h2>
                <input type="hidden" id="offerId">
                <label>Description:</label>
                <input type="text" id="editDescription" class="form-control">
                <label>Discount Type:</label>
                <select id="editDiscountType" class="form-control">
                    <option value="percentage">Percentage</option>
                    <option value="fixed">Fixed Amount</option>
                </select>
                <label>Discount Value:</label>
                <input type="number" id="editDiscountValue" class="form-control">
                <label>Start Date:</label>
                <input type="date" id="editStartDate" class="form-control">
                <label>End Date:</label>
                <input type="date" id="editEndDate" class="form-control">
                <button class="btn btn-primary" onclick="saveEditedOffer()">Save</button>
            </div>
        </div>
        
        <!-- Modal CSS -->
        <style>
            .modal { align-items: center; display: none; position: fixed; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); }
            .modal-content { background-color: white; margin: 15% auto; padding: 20px; width: 50%; }
            .close { float: right; font-size: 28px; cursor: pointer; }
        </style>
    </section>


   


</main>

<%- include("../../views/partials/admin/footer.ejs") %>

<!-- ✅ Notification Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" style="max-width: 500px;">
    <div class="modal-content" style="border-radius: 16px; border: none; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);">
      <div class="modal-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none; padding: 24px 32px 20px;">
        <h5 class="modal-title text-white" id="notificationModalLabel" style="font-weight: 600; font-size: 22px; display: flex; align-items: center; gap: 12px;">
          <i class="fas fa-info-circle" style="font-size: 26px;"></i>
          Notification
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="notificationModalBody" style="padding: 28px 32px; font-size: 16px; line-height: 1.7; color: #4a5568; min-height: 80px;"></div>
      <div class="modal-footer" style="border: none; padding: 20px 32px 28px; display: flex; justify-content: flex-end;">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" style="border-radius: 10px; padding: 12px 40px; font-weight: 500; font-size: 15px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none; min-width: 120px;">OK</button>
      </div>
    </div>
  </div>
</div>

<!-- ✅ Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" style="max-width: 520px;">
    <div class="modal-content" style="border-radius: 16px; border: 2px solid #feb2b2; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);">
      <div class="modal-header" style="background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%); border: none; padding: 24px 32px 20px;">
        <h5 class="modal-title text-white" id="confirmDeleteLabel" style="font-weight: 600; font-size: 22px; display: flex; align-items: center; gap: 12px;">
          <i class="fas fa-exclamation-triangle" style="font-size: 26px;"></i>
          Confirm Deletion
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="confirmDeleteBody" style="padding: 28px 32px; font-size: 16px; line-height: 1.7; color: #2d3748; min-height: 80px;">
        Are you sure you want to delete this offer? This action cannot be undone.
      </div>
      <div class="modal-footer" style="border: none; padding: 20px 32px 28px; display: flex; justify-content: flex-end; gap: 12px;">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="border-radius: 10px; padding: 12px 28px; font-weight: 500; font-size: 15px; background-color: #e2e8f0; color: #4a5568; border: none; min-width: 110px;">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn" style="border-radius: 10px; padding: 12px 28px; font-weight: 500; font-size: 15px; background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%); border: none; min-width: 110px;">Delete</button>
      </div>
    </div>
  </div>
</div>

<script>
    // 🔹 Utility: show message in modal
    function showModalMessage(message, title = 'Notification', isSuccess = true) {
        const modalLabel = document.getElementById('notificationModalLabel');
        const modalBody = document.getElementById('notificationModalBody');

        modalLabel.textContent = title;
        modalLabel.className = isSuccess ? 'modal-title text-success' : 'modal-title text-danger';
        modalBody.textContent = message;

        const notificationModal = new bootstrap.Modal(document.getElementById('notificationModal'));
        notificationModal.show();
    }

    // 🔹 Toggle and reset offer form
    document.getElementById('toggleFormBtn').addEventListener('click', function() {
        resetForm();
        const formCard = document.getElementById('offerFormCard');
        formCard.style.display = formCard.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('closeFormBtn').addEventListener('click', function() {
        document.getElementById('offerFormCard').style.display = 'none';
    });

    function resetForm() {
        const form = document.getElementById('categoryOfferForm');
        form.reset();
        document.getElementById('offerId').value = '';
        document.getElementById('formTitle').textContent = 'Add New Product Offer';
        document.getElementById('submitBtn').textContent = 'Add Offer';
        form.setAttribute('data-mode', 'add');
    }

    // 🔹 Handle form submit
    document.getElementById('categoryOfferForm').addEventListener('submit', function (e) {
        e.preventDefault(); 

        const offerId = document.getElementById('offerId').value;
        const isEditMode = offerId !== '';

        const formData = {
            description: document.getElementById('description').value,
            selectedProduct: document.getElementById('selectedProduct').value,
            discountType: document.getElementById('discountType').value,
            discountValue: document.getElementById('discountValue').value,
            startDate: document.getElementById('startDate').value,
            endDate: document.getElementById('endDate').value
        };

        let url = '/admin/addProductOffer';
        let method = 'POST';
        if (isEditMode) {
            url = `/admin/updateProductOffer/${offerId}`;
            method = 'PUT';
        }

        fetch(url, {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if(data.success) {
                showModalMessage(
                    isEditMode ? 'Product offer updated successfully!' : 'Product offer added successfully!',
                    'Success',
                    true
                );
                setTimeout(() => location.reload(), 2000);
            } else {
                showModalMessage(data.message || 'Operation failed.', 'Error', false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showModalMessage('Something went wrong. Please try again.', 'Error', false);
        });
    });

    // 🔹 Custom confirmation modal logic
    let offerToDelete = null;
    function deleteOffer(offerId) {
        offerToDelete = offerId; // store ID temporarily
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
        confirmModal.show();

        // remove old listener to avoid multiple triggers
        const confirmBtn = document.getElementById('confirmDeleteBtn');
        confirmBtn.replaceWith(confirmBtn.cloneNode(true)); 
        const newConfirmBtn = document.getElementById('confirmDeleteBtn');

        newConfirmBtn.addEventListener('click', function() {
            confirmModal.hide();
            performDeleteOffer(offerToDelete);
        });
    }

    function performDeleteOffer(offerId) {
        fetch(`/admin/deleteProductOffer/${offerId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showModalMessage('Offer deleted successfully.', 'Deleted', true);
                setTimeout(() => location.reload(), 2000);
            } else {
                showModalMessage('Failed to delete offer.', 'Error', false);
            }
        })
        .catch(error => {
            console.error("Error deleting offer:", error);
            showModalMessage('An error occurred while deleting.', 'Error', false);
        });
    }

    // 🔹 Edit offer modal
    function editOffer(offerId, description, discountType, discountValue, startDate, endDate) {
        document.getElementById("offerId").value = offerId;
        document.getElementById("editDescription").value = description;
        document.getElementById("editDiscountType").value = discountType;
        document.getElementById("editDiscountValue").value = discountValue;
        document.getElementById("editStartDate").value = new Date(startDate).toISOString().split("T")[0];
        document.getElementById("editEndDate").value = new Date(endDate).toISOString().split("T")[0];
        document.getElementById("editOfferModal").style.display = "block";
    }

    // 🔹 Save edited offer
    function saveEditedOffer() {
        const offerId = document.getElementById("offerId").value;
        const updatedOffer = {
            description: document.getElementById("editDescription").value,
            discountType: document.getElementById("editDiscountType").value,
            discountValue: document.getElementById("editDiscountValue").value,
            startDate: document.getElementById("editStartDate").value,
            endDate: document.getElementById("editEndDate").value
        };

        fetch(`/admin/updateProductOffer/${offerId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedOffer),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showModalMessage('Offer updated successfully.', 'Success', true);
                setTimeout(() => location.reload(), 2000);
            } else {
                showModalMessage('Failed to update offer.', 'Error', false);
            }
        })
        .catch(error => {
            console.error("Error updating offer:", error);
            showModalMessage('Error updating offer. Please try again.', 'Error', false);
        });
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toISOString().split('T')[0];
    }
</script>
