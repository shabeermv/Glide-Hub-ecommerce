<%- include("../../views/partials/admin/header.ejs") %>

<link href="https://unpkg.com/cropperjs/dist/cropper.min.css" rel="stylesheet">

<main class="main-wrap">
    <header class="main-header navbar">
        <!-- Header content remains the same -->
    </header>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" id="applyButton">Update</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="product_title" class="form-label">Product title</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_title" value="<%= product.title %>" required />
                        </div>
                        <div class="row gx-2">
                            <div class="col-md-4 mb-3">
                                <label for="product_color" class="form-label">Color</label>
                                <input type="text" placeholder="Type here" class="form-control" id="product_color" value="<%= product.color %>" />
                            </div>
                            <div class="col-md-8 mb-3">
                                <label for="product_size" class="form-label">Size Management</label>
                                <div class="size-management">
                                    <input type="text" placeholder="Type size here" class="form-control mb-2" id="product_size" />
                                    <input type="number" placeholder="Enter stock for size" class="form-control mb-2" id="size_stock" />
                                    <button type="button" id="addSizeButton" class="btn btn-sm btn-primary">Add Size with Stock</button>
                                </div>
                                <div id="sizeList" class="mt-3">
                                    <% product.sizes.forEach((size, index) => { %>
                                        <div class="size-item d-flex align-items-center mb-2" data-size="<%= size.size %>">
                                            <span class="me-2"><%= size.size %> - Stock: </span>
                                            <input type="number" class="form-control form-control-sm size-stock-input me-2" 
                                                   value="<%= size.stock %>" style="width: 80px;"
                                                   data-original-stock="<%= size.stock %>">
                                            <button type="button" class="btn btn-sm btn-danger delete-size">Delete</button>
                                        </div>
                                    <% }); %>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="product_brand" class="form-label">Brand</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_brand" value="<%= product.brandName %>" required />
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <div>
                            <label class="form-label">Description</label>
                            <textarea placeholder="Type here" class="form-control" rows="4" id="product_description"><%= product.description %></textarea>
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <div>
                            <label class="form-label">Current Images</label>
                            <div class="current-images-container">
                                <% product.image.forEach((img, index) => { %>
                                    <div class="current-image-wrapper">
                                        <img src="<%= img %>" alt="Product image <%= index + 1 %>" class="current-image">
                                        <button type="button" class="btn btn-sm btn-danger remove-image" data-index="<%= index %>">Remove</button>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                        <div class="mt-4">
                            <label class="form-label" for="product_images">Add New Images</label>
                            <input type="file" id="product_images" accept="image/*" name="images" multiple>
                            <div id="image-preview-container" class="mt-3"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label">Price</label>
                            <input type="number" placeholder="Type here" class="form-control" id="product_price" value="<%= product.price %>" required />
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select" id="product_status" name="category">
                                <option disabled>Select a Category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>" <%= category._id.toString() === product.category.toString() ? 'selected' : '' %>><%= category.name %></option>
                                <% }); %>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    <!-- Error Toast -->
    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fa fa-exclamation-circle me-2"></i>
                <span id="errorToastMessage">Error message</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
    
    <!-- Warning Toast -->
    <div id="warningToast" class="toast align-items-center text-white bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fa fa-exclamation-triangle me-2"></i>
                <span id="warningToastMessage">Warning message</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">
                    <i class="fa fa-check-circle me-2"></i>Success
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="fa fa-check-circle text-success" style="font-size: 48px;"></i>
                <h4 class="mt-3">Product Updated Successfully!</h4>
                <p class="text-muted">Your product has been updated and saved.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="redirectButton">Go to Products</button>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>

<style>
    .image-wrapper {
        position: relative;
        display: inline-block;
        margin: 10px;
    }
    .image-preview {
        max-width: 200px;
        max-height: 200px;
        display: block;
    }
    .current-image-wrapper {
        display: inline-block;
        margin: 10px;
        position: relative;
    }
    .current-image {
        max-width: 200px;
        max-height: 200px;
        display: block;
    }
    .remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
    }
    .crop-button {
        display: block;
        margin-top: 5px;
    }
    .size-item {
        background-color: #f8f9fa;
        padding: 8px;
        border-radius: 4px;
    }
</style>

<script>
let sizesWithStock =<%-JSON.stringify(product.sizes || []) %>;
let croppers = [];
let croppedImages = [];
let removedImages = [];
let currentImages = <%- JSON.stringify(product.image || []) %>;

// Toast helper function
function showToast(toastId, message) {
    const toastElement = document.getElementById(toastId);
    const messageElement = document.getElementById(toastId + 'Message');
    messageElement.textContent = message;
    const toast = new bootstrap.Toast(toastElement, { autohide: true, delay: 3000 });
    toast.show();
}

// Handle size stock updates
document.querySelectorAll('.size-stock-input').forEach(input => {
    input.addEventListener('change', function() {
        const sizeItem = this.closest('.size-item');
        const size = sizeItem.dataset.size;
        const newStock = parseInt(this.value);
        
        if (isNaN(newStock) || newStock < 0) {
            showToast('errorToast', 'Please enter a valid stock number');
            this.value = this.dataset.originalStock;
            return;
        }
        
        const sizeIndex = sizesWithStock.findIndex(s => s.size === size);
        if (sizeIndex !== -1) {
            sizesWithStock[sizeIndex].stock = newStock;
        }
    });
});

// Handle size deletion
document.querySelectorAll('.delete-size').forEach(button => {
    button.addEventListener('click', function() {
        const sizeItem = this.closest('.size-item');
        const size = sizeItem.dataset.size;
        sizesWithStock = sizesWithStock.filter(s => s.size !== size);
        sizeItem.remove();
    });
});

// Add new size with stock
document.getElementById('addSizeButton').addEventListener('click', () => {
    const sizeInput = document.getElementById('product_size').value.trim();
    const sizeStockInput = document.getElementById('size_stock').value.trim();

    if (!sizeInput) {
        showToast('warningToast', 'Please enter a size.');
        return;
    }
    if (!sizeStockInput || isNaN(sizeStockInput) || sizeStockInput <= 0) {
        showToast('warningToast', 'Please enter a valid stock number.');
        return;
    }

    if (!sizesWithStock.some(size => size.size === sizeInput)) {
        const newSize = { size: sizeInput, stock: Number(sizeStockInput) };
        sizesWithStock.push(newSize);

        const sizeList = document.getElementById('sizeList');
        const newSizeElement = document.createElement('div');
        newSizeElement.className = 'size-item d-flex align-items-center mb-2';
        newSizeElement.dataset.size = sizeInput;
        newSizeElement.innerHTML = `
            <span class="me-2">${sizeInput} - Stock: </span>
            <input type="number" class="form-control form-control-sm size-stock-input me-2" 
                   value="${sizeStockInput}" style="width: 80px;"
                   data-original-stock="${sizeStockInput}">
            <button type="button" class="btn btn-sm btn-danger delete-size">Delete</button>
        `;

        // Add event listeners to new elements
        const deleteButton = newSizeElement.querySelector('.delete-size');
        deleteButton.addEventListener('click', function() {
            sizesWithStock = sizesWithStock.filter(s => s.size !== sizeInput);
            newSizeElement.remove();
        });

        const stockInput = newSizeElement.querySelector('.size-stock-input');
        stockInput.addEventListener('change', function() {
            const newStock = parseInt(this.value);
            if (isNaN(newStock) || newStock < 0) {
                showToast('errorToast', 'Please enter a valid stock number');
                this.value = this.dataset.originalStock;
                return;
            }
            const sizeIndex = sizesWithStock.findIndex(s => s.size === sizeInput);
            if (sizeIndex !== -1) {
                sizesWithStock[sizeIndex].stock = newStock;
            }
        });

        sizeList.appendChild(newSizeElement);
        document.getElementById('product_size').value = '';
        document.getElementById('size_stock').value = '';
    } else {
        showToast('warningToast', 'This size already exists.');
    }
});

// Handle removal of existing images
document.querySelectorAll('.remove-image').forEach(button => {
    button.addEventListener('click', function() {
        const index = this.dataset.index;
        removedImages.push(currentImages[index]);
        this.closest('.current-image-wrapper').remove();
    });
});

// Handle new image selection and cropping
const imageInput = document.getElementById('product_images');
const imagePreviewContainer = document.getElementById('image-preview-container');

imageInput.addEventListener('change', function(event) {
    imagePreviewContainer.innerHTML = '';
    croppers = [];
    croppedImages = [];

    const files = event.target.files;
    if (files.length === 0) return;

    Array.from(files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            const imgWrapper = document.createElement('div');
            imgWrapper.classList.add('image-wrapper');
            imgWrapper.innerHTML = `
                <img src="${e.target.result}" class="image-preview" id="image-${index}">
                <button type="button" class="btn btn-sm btn-success crop-button" data-index="${index}">Crop</button>
            `;
            imagePreviewContainer.appendChild(imgWrapper);

            const imgElement = document.getElementById(`image-${index}`);
            const cropper = new Cropper(imgElement, {
                aspectRatio: 1,
                viewMode: 1,
            });

            croppers[index] = cropper;

            imgWrapper.querySelector('.crop-button').addEventListener('click', () => {
                const canvas = cropper.getCroppedCanvas();
                croppedImages[index] = canvas.toDataURL('image/png');
                imgElement.src = croppedImages[index];
                cropper.destroy();
            });
        };
        reader.readAsDataURL(file);
    });
});

// Form submission
document.getElementById('applyButton').addEventListener('click', () => {
    const productName = document.getElementById('product_title').value.trim();
    const productDescription = document.getElementById('product_description').value.trim();
    const productBrand = document.getElementById('product_brand').value.trim();
    const productPrice = document.getElementById('product_price').value.trim();
    const productStatus = document.getElementById('product_status').value;
    const productColor = document.getElementById('product_color').value;

    if (!productName || !productDescription || !productBrand || !productPrice || !productColor) {
        showToast('warningToast', 'Please fill in all required fields.');
        return;
    }

    if (sizesWithStock.length === 0) {
        showToast('warningToast', 'Please add at least one size with stock.');
        return;
    }

    const formData = new FormData();
    formData.append('title', productName);
    formData.append('description', productDescription);
    formData.append('brandName', productBrand);
    formData.append('color', productColor);
    formData.append('price', productPrice);
    formData.append('category', productStatus);
    formData.append('sizesWithStock', JSON.stringify(sizesWithStock));
    formData.append('removedImages', JSON.stringify(removedImages));

    croppedImages.forEach((imageData, index) => {
        if (imageData) {
            const blob = dataURLtoBlob(imageData);
            formData.append('images', blob, `cropped-image-${index}.png`);
        }
    });

    fetch('/admin/updateProduct/<%= product._id %>', {
        method: 'PATCH',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        } else {
            showToast('errorToast', 'Error updating product: ' + data.message);
        }
    })
    .catch(err => {
        console.error('Error:', err);
        showToast('errorToast', 'Failed to update product. Please try again.');
    });
});

// Handle redirect on modal button click
document.getElementById('redirectButton').addEventListener('click', () => {
    window.location.href = '/admin/products';
});

// Helper function to convert data URL to Blob
function dataURLtoBlob(dataURL) {
    const byteString = atob(dataURL.split(',')[1]);
    const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], { type: mimeString });
}
</script>

<%- include("../../views/partials/admin/footer.ejs") %>